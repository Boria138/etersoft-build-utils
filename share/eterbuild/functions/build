#!/bin/bash
# 2008 Etersoft www.etersoft.ru
# Author: Vitaly Lipatov <lav@etersoft.ru>
# Public domain


# Universal rpmbuild function
# 1st: rpmbuild, hsh, buildreq
# 2nd: spec name(s) (only one if git, we will skip it)
# other parameters
uni_rpmbuild()
{
	local RET=0
	# hack due quotes
	# just for fill by something
	local ONEPARAM="--quiet"
	local TWOPARAM="--quiet"
	local THRPARAM="--quiet"
	local FOURPARAM="--quiet"
	local FIVEPARAM="--define='_unpackaged_files_terminate_build 0'"
	local COMMIT=""
	local COMMANDAFTER=""

	if [ "$1" = "--commit" ] ; then
		shift
		COMMIT="--commit"
		COMMANDAFTER="git reset"
	fi

	local SPECNAME="$1"
	local SPECDIR=`dirname $SPECNAME`
	local GEAR=gear

	if [ -n "$USE_LEGACY_COMPRESSION" ] ; then
		# FIXME: do not override -v
		ONEPARAM="--define=_source_payload w9.gzdio"
	fi

	if [ -n "$USE_VENDOR" ] ; then
		THRPARAM="--define=_vendor $USE_VENDOR"
	fi
	
	if [ -n "$RPMTOPDIR" ] ; then
		TWOPARAM="--define=_topdir $RPMTOPDIR"
	fi

	if [ -n "$CCACHE_ENABLE" ] && [ -n "$CCACHE_DIR" ] ; then
		FOURPARAM="--define=__ccache_dir $CCACHE_DIR"
	fi

	if is_gear $SPECDIR ; then
		[ -f "$SPECNAME" ] || fatal "run uni_rpmbuild with spec as 2nd parameter"
		shift # skip spec name
		#[ -n "$SPECDIR" ] && [ "$SPECDIR" != "." ] && warning "Spec is not in git dir (SPECDIR='$SPECDIR')"
		# FIXME: use spec name as project name
		BASESPECNAME=$(basename "$SPECNAME")
		ALTGEARRULESFILE=.gear/rules-${BASESPECNAME/.spec/}
		ALTGEARRULES=$(git rev-parse --git-dir)/../$ALTGEARRULESFILE
		GEARRULES=
		if [ -r "$ALTGEARRULES" ] ; then
			echo "Build with alternate rules $ALTGEARRULESFILE"
			GEARRULES=--rules="$ALTGEARRULESFILE"
		fi
		# build package without MENV checking
		if true || [ "$MENV" = "SS" ] ; then
			showcmd $GEAR $COMMIT $GEARRULES --rpmbuild -- $RPMBUILD "$ONEPARAM" "$TWOPARAM" "$THRPARAM" "$FOURPARAM" "$FIVEPARAM" $@
			$NICE $GEAR $COMMIT $GEARRULES --rpmbuild -- $RPMBUILD "$ONEPARAM" "$TWOPARAM" "$THRPARAM" "$FOURPARAM" "$FIVEPARAM" $@ || RET=$?
			[ -z "$COMMANDAFTER" ] || docmd $COMMANDAFTER
		else
			fatal "Build backported src.rpm from git is unsupported now"
			# build src.rpm via hasher (on ALT)
#			$NICE gear-hsh --build-args="-bs" --rpmbuild -- $COMMAND "$ONEPARAM" $@
			docmd $NICE $GEAR --hasher -- myhsh --build-prog=$ETERBUILDDIR/functions/rebuild $@ || RET=$?
		fi
	else
		mkdir -p $RPMTOPDIR/BUILD $RPMTOPDIR/SRPMS
		showcmd $RPMBUILD "$ONEPARAM" "$TWOPARAM" "$THRPARAM" "$FOURPARAM" "$FIVEPARAM" $@
		$NICE $RPMBUILD "$ONEPARAM" "$TWOPARAM" "$THRPARAM" "$FOURPARAM" "$FIVEPARAM" $@ || RET=$?
	fi
	#[ -n "$VERBOSE" ] && echo "Run $RPMBUILD $ONEPARAM $TWOPARAM $THRPARAM $FOURPARAM $FIVEPARAM $@" || :
	return $RET
}


uni_buildreq()
{
	local RET=0
	local BUILDREQPARAM="$1"
	shift
	local SPECNAME=$(realpath "$1")
	shift
	local SPECDIR=`dirname $SPECNAME`
	local GEARBUILDREQ=gear-buildreq

	if is_gear $SPECDIR ; then
		showcmd $GEARBUILDREQ $BUILDREQPARAM --commit -- "$SPECNAME" $@
		$NICE $GEARBUILDREQ $BUILDREQPARAM --commit -- "$SPECNAME" $@ || RET=$?
	else
		showcmd buildreq $BUILDREQPARAM "$SPECNAME" $@
		$NICE buildreq $BUILDREQPARAM "$SPECNAME" $@ || RET=$?
	fi
	return $RET
}

uni_rpminstall()
{
	local RET=0
	local TWOPARAM="-v"

	if [ -n "$RPMTOPDIR" ] ; then
		TWOPARAM="--define=_topdir $RPMTOPDIR"
	fi

	#if is_gear $SPECDIR ; then
	#	$NICE $GEARBUILDREQ --commit -- $@ || RET=$?
	#else
		echo -n "Install package "
		docmd mkdir -p $RPMTOPDIR/SOURCES $RPMTOPDIR/SRPMS $RPMTOPDIR/RPMS
		showcmd rpm -iv "$TWOPARAM" $@
		rpm -iv "$TWOPARAM" $@ || RET=$?
	#fi
	return $RET
}

# remove source and spec
uni_rpmrm()
{
	local TWOPARAM="-v"

	if [ -n "$RPMTOPDIR" ] ; then
		TWOPARAM="--define=_topdir $RPMTOPDIR"
	fi

	showcmd $RPMBUILD "$TWOPARAM" --rmsource --rmspec --nodeps $@
	$RPMBUILD "$TWOPARAM" --rmsource --rmspec --nodeps $@
}

