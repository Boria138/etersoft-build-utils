

---------------------------
aptU - update package and all it requires

Usage: aptU [-v] [-l] [package(s)]

Параметры:
  -v  verbose
  -l  print list of required packages


---------------------------
dmake [-t] [-p] - make with distcc using (distributed build)
 -p  run in plain mode (without pump)
 -t  run test compiler via ssh for build hosts


---------------------------
emkimage - run make in mkimage-profiles
Usage: emkimage [-b p6] <target>


---------------------------
estrlist developed for string list operations. See also cut, join, paste...
Usage: bin/estrlist <command> [args]
Commands:
strip_spaces [args]               - remove spaces between words
filter_strip_spaces               - remove spaces from words from standart input
reg_remove  <PATTERN> [word list] - remove words containing a match to the given PATTERN (grep notation)
reg_wordremove  <PATTERN> [word list] - remove words containing a match to the given PATTERN (grep -w notation)
exclude <list1> [list2]           - print list2 words contains also in list1
reg_exclude <PATTERN> [word list] - print only words not matched with PATTERN
reg_wordexclude <PATTERN> [word list] - print only words not matched with PATTERN
union [word list]                 - sort and remove duplicates
uniq [word list]                  - alias for union
list [word list]                  - just list words line by line
count [word list]                 - print word count

Examples:
$ bin/estrlist reg_remove "1." "11 12 21 22"
21 22
$ bin/estrlist reg_wordremove "1." "11 12 21 22"
21 22
$ bin/estrlist exclude "1 3" "1 2 3 4"
2 4
$ bin/estrlist reg_exclude "22 1." "11 12 21 22"
21
$ bin/estrlist reg_wordexclude "wo.* er" "work were more else"
were more else
$ bin/estrlist union "1 2 2 3 3" ""
1 2 3
$ bin/estrlist count "1 2 3 4 10" ""
5
$ bin/estrlist has "ex" "exactly"
TRUE
$ bin/estrlist has "exo" "exactly"
FALSE


---------------------------
gacl - acl control for gear repo in git.eter

Usage: gacl [GIRAR] [-b REPONAME] [package] command [params]

Параметры:
    GIRAR        git.alt or git.eter
    -b REPONAME  binary repository name (4.1, p5, t6 and so on) (sisyphus by default)

Commands:
    add USER  add new user to ACL list for package
    del USER  del user from ACL list for package
    show      show current ACL list

Examples:
    gacl package add newuser
    gacl package del newuser
    gacl -b p6 package show

Examples for git project from current dir:
    gacl add newuser
    gacl -b p6 show


---------------------------
gammit - make commit with description from last changelog entry in spec
Use: gammit


---------------------------
grpmbs - multi repo rpmbs analogue (build packages via girar)
Run in dir contains subdirs
Usage: grpmbs [GIRAR] [-a|-u] [-f] package1... package2...

Параметры:
    -a  build all packages in one task
    -u  build packages separately (one package per task)
    -f  force set tags (see rpmbs)


---------------------------
grpmbsh - multi repo rpmbsh analogue (build packages in hasher)
Usage: grpmbs [GIRAR] package1... package2...


---------------------------
jmake - make with ccache using and parallel build enabled


---------------------------
loginhsh - install package in hasher / take shell
Usage:  [-t -i -h -r -c -b -i] [package name] [package file bin.rpm] ...

Параметры:
   -i           initialize hasher
   -b REPONAME  binary repository name (4.1, p5, t6 and so on)
   -c           cleanup hasher
   -q           quiet mode (don't run anything)
   -r           run command
   -o           log in as root user
   -v           verbose
   -x           allow run X program (set DISPLAY and install xauth)
   -t           use test hasher dir (different to usual build dir)

Extra options:
   -a           auto test mode for post myhsh build checking
   -d           print hasher dir
   -M??         binary repository name (obsoleted)


---------------------------


---------------------------
myhsh - build package via hasher
Usage:  [-i -c -l] src.rpm...

Параметры:
   -i  install built packages in test hasher
   -c  build without stuff (without previous built packages)
   -l  lazy cleanup (before build, not after)


---------------------------
Using autodetected spec /srv/lav/Projects/git/etersoft-build-utils/etersoft-build-utils.spec...
rpmbb (Build Binary) - build binary rpm from spec or from git
Usage: rpmbb [-c -p -i -r -R] [spec]

Параметры:
   -i  skip build stage, but do install files and package it
   -p  only packaging installed files into package
   -r  find build requires (run buildrequires)
   -R  find build requires during install (run buildrequires with -bi)

Ext. options:
   -c  start from compile stage
   -d  build with dmake


---------------------------
rpmbk (Build Korinf) - build package from current repo in Korinf
Usage: rpmbk [Distro/Version] [spec]


---------------------------
Using autodetected spec /srv/lav/Projects/git/etersoft-build-utils/etersoft-build-utils.spec...
rpmbph (BackPort and Hasher) - backports spec and rebuild it
Usage:  [-r -u -U -n -i -m -v -q] [-M60] [-b REPONAME] spec...
Usage: rpmbph [GIRAR] -b p6 for backport to ALT Linux p6 and so on

Параметры:
   -u           sign and upload after build
   -n           do not build in hasher
   -i           install built packages in test hasher
   -b REPONAME  binary repository name (4.1, p5, t6 and so on)

Ext. options:
   -v           more verbose
   -q           quiet

Examples:
 $ rpmbph -b p6 -n -u  - backport to p6 and ask to build it


---------------------------
Using autodetected spec /srv/lav/Projects/git/etersoft-build-utils/etersoft-build-utils.spec...
rpmbs (Build Source) - run git repo build or make src.rpm from spec
Usage:  [GIRAR] [-s|-t|-u|-a|-A|-c] [-o -z -n -p --nodeps] [-k [TARGETDIR]] [spec or src.rpm]...

Параметры:
   -u            sign and run gear build task after build
   -a TASK | -A  sign package(s)/repo, push/upload it and add to (shared) task TASK
   -p POCKET     build package in POCKET (supported on git.etersoft.ru only)
   -b REPONAME  binary repository name (4.1, p5, t6 and so on)

Ext. options:
   -c           only sign package(s) with checking
   -f           force operation (overwrite tag)
   -s           sign package(s) (and move it to dir ETERDESTSRPM if defined)
   -t           set tag with sign
   -n           do not check with sisyphus_check before upload
   -o           create nosrc.rpm package
   -z           create src.rpm with compatible gzip compression (obsoleted)


---------------------------
Using autodetected spec /srv/lav/Projects/git/etersoft-build-utils/etersoft-build-utils.spec...
rpmbsh (Build Source in the Hasher)  - build [from] source; use hasher
Usage:  [-r -s -u -m -i -c] [-f] [spec or src.rpm]...

Параметры:
   -u  sign and run gear build task after build
   -i  install built packages in test hasher (via loginhsh -t)
   -f  force tag set (see rpmbs --help)

Ext. options:
   -c  build without stuff (without previous built packages)
   -s  sign (and move to dir ETERDESTSRPM if defined) after build
   -t  make temporary commit before build (rpmbb like behavior)
   -l  lazy cleanup (clean before build, not after)


---------------------------
rpmbugs - открывает баги в браузере
rpmbugs [-t] spec | bug number | package name | -qf command_name | /path/to/file

Параметры:
   -t  list in text console


---------------------------
rpmcs (Cleanup Spec) - cleanup spec (like cleanup_spec command)
Usage: rpmcs [--skip-reqs] [specfile]
spec file can be autodetected from git repo
 specfile - spec file (copy will be saved as specfile~)
 --skip-reqs  do not replace requires


---------------------------
Using autodetected spec /srv/lav/Projects/git/etersoft-build-utils/etersoft-build-utils.spec...
rpmgp (Get Package) - various package download operations
Usage: rpmgp [GIRAR/remote alias] [options] -b p6 [system] pkgname
 pkgname - installed package name or src.rpm
 system  - name of system (ALT Linux by default if -a missed)

Параметры:
   -a   search pkgname in all known repositories
   -b REPONAME  binary repository name (4.1, p5, t6 and so on)
   -c   check if this package exists in the ALT Linux repository
   -d   download all matched packages
   -g   clone last built package repo
   -gp  clone last built package repo via public access
   -gm  remote clone repo to USER/packages and clone it locally
   -m   migrate to gear from spec/srpm

Ext. options:
   -i   install packages needed for build (use sudo apt-get) (need spec not package name)
   -l   list packages needed for build (in local pkg system notation) (experimental)
   -r   refresh package list (download it again)
   -s   list all known remote repositories


---------------------------
Using autodetected spec /srv/lav/Projects/git/etersoft-build-utils/etersoft-build-utils.spec...
rpmgs (Get Source) - get sources by spec / repository
Usage:  [GIRAR] [-a -r ] spec [new_version]
You can run 'rpmgs file.spec new_version' for set new version and download it

Параметры:
   -a  get all source (not only Source|Source0)
   -f  force download (remove source before download)


---------------------------
rpmlog - update version/release and changelog
Usage: rpmlog [-r|-s|-v] [-l|-t] [SPEC] [fromTAG] [toTAG]

Параметры:
   -v  increment version
   -r  increment release
   -s  increment subrelease
   -l  add changelog from git log (since last release tag or TAG)

Ext. options:
   -t  test run (without change files and repo)

Example:
   $ rpmlog -v -l   - typical build new version


---------------------------
rpmpub - Etersoft specific script for publish gear repo to target ftp dir as src.rpm
Usage: rpmpub [-f] [-r PROJECTVERSION ] [SPEC] [TARGETDIR]

Параметры:
   -f                 force set tag
   -s                 skip set tag
   -r PROJECTVERSION  set other project version (PROJECTVERSION/sources)
   TARGETDIR          copy signed src.rpm package to TARGETDIR (f.i., /tmp/some_version/sources)
                      By default used path from Source: spec field. 
                      Also you can set default target dir in ETERDESTSRPM variable.


---------------------------
Use epmqf from epm package manager (eepm) instead
epm - EPM package manager
Usage: epm [options] <command> [package name(s), package files]...
 Commands:
    -i|install|add|i      install package(s) from remote repositories or from local file
    -e|-P|remove|delete|uninstall|erase|e  remove (delete) package(s) from the database and the system
    -s|search             search in remote package repositories
    -qp|qp|query_package  search in the list of installed packages
    -qf|qf|which|belongs  query package(s) owning file
    reinstall             reinstall package(s) from remote repositories or from local file
    Install               perform update package repo info and install package(s) via install command
    -q|q|installed|query  check presence of package(s) and print this name (also --short is supported)
    -sf|sf|filesearch     search in which package a file is included
    -ql|ql|filelist       print package file list
    check|fix|verify      check local package base integrity and fix it
    changelog|cl|-cl      show changelog for package
    -qi|qi|info|show      print package detail info
    requires|deplist      print package requires
    provides              print package provides
    whatdepends           print packages dependences on that
    whatprovides          print packages provides that target
    conflicts             print package conflicts
    -qa|list|packages|-l|qa  list of installed package(s)
    programs              list of installed GUI program(s)
    update                update remote package repository databases
    addrepo|ar            add package repo
    repolist|sl|rl|listrepo  print repo list
    removerepo|rr         remove package repo
    release-upgrade       update whole system to the next release
    kernel-update|kernel-upgrade|update-kernel|upgrade-kernel  update system kernel to the last repo version
    clean                 clean local package cache
    autoremove            auto remove unneeded package(s)
    upgrade|dist-upgrade  performs upgrades of package software distributions
    Upgrade               performs update && upgrade command
    simulate              simulate install (it does check requires, minimally)
    checkpkg|integrity    check package integrity

 Options:
    -h|--help|help        this help
    -v|--version          print version
    --verbose             verbose mode
    --skip-installed      skip already install during install
    --show-command-only   show command only, do not any action (supports install and remove ONLY)
    --quiet               quiet mode (do not print commands before exec)
    --nodeps              skip dependency check (during install/simulate and so on)
    --force               force install/remove package (f.i., override)
    --short               short output (just 'package' instead 'package-version-release')
    --sort                sort output, f.i. --sort=size (supported only for packages command)
    --auto                non interactive mode



---------------------------
rpmrb (Re Build) - update spec to vermajor.verminor version, build %rel release
Usage: rpmrb [spec] [vermajor][.verminor] [rel]
Example:
          $ rpmrb [name.spec] 22.6 alt2
          $ rpmrb 1.2.3


---------------------------
rpmreqs [package(s) file(s)] - print out package requires


---------------------------
Use epmi from epm package manager (eepm) instead
epm - EPM package manager
Usage: epm [options] <command> [package name(s), package files]...
 Commands:
    -i|install|add|i      install package(s) from remote repositories or from local file
    -e|-P|remove|delete|uninstall|erase|e  remove (delete) package(s) from the database and the system
    -s|search             search in remote package repositories
    -qp|qp|query_package  search in the list of installed packages
    -qf|qf|which|belongs  query package(s) owning file
    reinstall             reinstall package(s) from remote repositories or from local file
    Install               perform update package repo info and install package(s) via install command
    -q|q|installed|query  check presence of package(s) and print this name (also --short is supported)
    -sf|sf|filesearch     search in which package a file is included
    -ql|ql|filelist       print package file list
    check|fix|verify      check local package base integrity and fix it
    changelog|cl|-cl      show changelog for package
    -qi|qi|info|show      print package detail info
    requires|deplist      print package requires
    provides              print package provides
    whatdepends           print packages dependences on that
    whatprovides          print packages provides that target
    conflicts             print package conflicts
    -qa|list|packages|-l|qa  list of installed package(s)
    programs              list of installed GUI program(s)
    update                update remote package repository databases
    addrepo|ar            add package repo
    repolist|sl|rl|listrepo  print repo list
    removerepo|rr         remove package repo
    release-upgrade       update whole system to the next release
    kernel-update|kernel-upgrade|update-kernel|upgrade-kernel  update system kernel to the last repo version
    clean                 clean local package cache
    autoremove            auto remove unneeded package(s)
    upgrade|dist-upgrade  performs upgrades of package software distributions
    Upgrade               performs update && upgrade command
    simulate              simulate install (it does check requires, minimally)
    checkpkg|integrity    check package integrity

 Options:
    -h|--help|help        this help
    -v|--version          print version
    --verbose             verbose mode
    --skip-installed      skip already install during install
    --show-command-only   show command only, do not any action (supports install and remove ONLY)
    --quiet               quiet mode (do not print commands before exec)
    --nodeps              skip dependency check (during install/simulate and so on)
    --force               force install/remove package (f.i., override)
    --short               short output (just 'package' instead 'package-version-release')
    --sort                sort output, f.i. --sort=size (supported only for packages command)
    --auto                non interactive mode



---------------------------
rpmunmets - tests unmets in build packages
Usage:  [-M60] [-s]
Параметры:
 -s   - get all unmets
 -M60 - test for distro ALT Linux M60


---------------------------
Using autodetected spec /srv/lav/Projects/git/etersoft-build-utils/etersoft-build-utils.spec...
rpmurl - open package Url in the default browser
Usage:  [-c -f -p -s] spec or package...
Параметры:
   -c  check if package URL is accessible
   -p  open package page on http://sisyphus.ru
   -s  open source dir in the default browser

Ext. options:
   -f  print failed URL only
