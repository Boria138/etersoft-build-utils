

---------------------------
aptU - update package and all it requires

Usage: aptU [-v] [-l] [package(s)]

Options:
  -v  verbose
  -l  print list of required packages


---------------------------
dmake [-t] [-p] - make with distcc using (distributed build)
 -p  run in plain mode (without pump)
 -t  run test compiler via ssh for build hosts


---------------------------
gacl - acl control for gear repo in git.alt

Usage: gacl [GIRAR] [-b REPONAME] [package] command [params]

Options:
    GIRAR        git.alt or git.eter
    -b REPONAME  binary repository name (4.1, p5, t6 and so on) (sisyphus by default)

Commands:
    add USER  add new user to ACL list for package
    del USER  del user from ACL list for package
    show      show current ACL list

Examples:
    gacl package add newuser
    gacl package del newuser
    gacl -b p6 package show

Examples for git project from current dir:
    gacl add newuser
    gacl -b p6 show


---------------------------
ginit - initialize repo in git.alt for current project
Use: ginit [GIRAR]
     ginit git.eter - for init in git.eter gear repo


---------------------------
gitcam - do fast git commit amend (apply all current changes to the last commit)
Use: gitcam [-e]
     -e - edit commit message


---------------------------
gpull - do git pull with fast forward only by default.

Usage: gpull [-a] [-n] [repo] [branch]

gpull without parameters or with branch name
gpull myrepo - for pull from remote myrepo gear repo (with --rebase by default)

Options:
   -a  pull all branches
   -r  rebase during pull
   -m  do merge if possible
   -f  pull with fast forward only (default)
   -c  return error status if repo was not uptodate (gpull || echo 'Was updated last time')


---------------------------
gpush - publish current project repo remote git repo
Usage:  [GIRAR/remote alias] [-f|--force] [-a|--all] [-t|--tags] [tag]
Options:
 -f - force push
 -a - push all branches
 -t - push all tags


---------------------------
grpmbs - multi repo rpmbs analogue (build packages via girar)
Run in dir contains subdirs
Usage: grpmbs [GIRAR] [-a|-u] [-f] package1... package2...

Options:
    -a  build all packages in one task
    -u  build packages separately (one package per task)
    -f  force set tags (see rpmbs)


---------------------------
grpmbsh - multi repo rpmbsh analogue (build packages in hasher)
Usage: grpmbs [GIRAR] package1... package2...


---------------------------
jmake - make with ccache using and parallel build enabled


---------------------------
loginhsh - install package in hasher / take shell
Usage:  [-t -i -h -r -c -b -i] [package name] [package file bin.rpm] ...

Options:
   -i           initialize hasher
   -b REPONAME  binary repository name (4.1, p5, t6 and so on)
   -c           cleanup hasher
   -q           quiet mode (don't run anything)
   -r           run command
   -o           log in as root user
   -v           verbose
   -x           allow run X program (set DISPLAY and use xauth)
   -t           use test hasher dir (different to build hasher)

Extra options:
   -a           auto test mode for post myhsh build checking
   -d           print hasher dir
   -M??         branch name


---------------------------


---------------------------
myhsh - build package via hasher
Usage:  [-m -s -u -i -c -l] src.rpm...

Options:
   -i  install built packages in test hasher
   -c  build without stuff (without previous built packages)
   -l  lazy cleanup (before build, not after)


---------------------------
Using autodetected spec etersoft-build-utils.spec...
rpmbb - build  binary rpm from spec
Usage:  [-c -p -i -r -R] spec...

Options:
   -i  skip build, but do install and package
   -r  find build requires
   -R  find build requires with -bi

Ext. options:
   -c  start from compile stage
   -p  packaging installed files into package
   -d  build with dmake


---------------------------
Using autodetected spec etersoft-build-utils.spec...
rpmbph - backports spec and rebuild it
Usage:  [-r -u -U -n -i -m -v -q] [-M60] [-b REPONAME] spec...
Usage: rpmbph -b p6 for backport to ALT Linux p6 and so on

Options:
   -u           sign and upload after build
   -n           do not build in hasher
   -i           install built packages in test hasher
   -b REPONAME  binary repository name (4.1, p5, t6 and so on)

Ext. options:
   -r           remote build
   -v           more verbose
   -q           quiet
Set ROOTDIR variable for backport to the other system


---------------------------
Using autodetected spec etersoft-build-utils.spec...
rpmbs - run git repo build or make src.rpm from spec
Usage:  [GIRAR] [-s|-t|-u|-a|-c] [-o -z -n -p --nodeps] [-k [TARGETDIR]] [spec or src.rpm]...

Options:
   -u            sign and run gear build task after build
   -a TASK       sign package(s)/repo, push/upload it and add to (shared) task TASK
   -p POCKET     build package in POCKET (supported on git.etersoft.ru only)

Ext. options:
   -b REPONAME  binary repository name (4.1, p5, t6 and so on)
   -c           only sign package(s) with checking
   -f           force operation (overwrite tag)
   -s           sign package(s) (and move it to dir ETERDESTSRPM if defined)
   -t           set tag with sign
   -n           do not check with sisyphus_check before upload
   -o           create nosrc.rpm package
   -z           create src.rpm with compatible gzip compression


---------------------------
Using autodetected spec etersoft-build-utils.spec...
rpmbsh - BSH - build [from] source; use hasher
Usage:  [-r -s -u -m -i -c] [-f] [spec or src.rpm]...

Options:
   -r  remote build (on builder64 host)
   -u  sign and run gear build task after build
   -i  install built packages in test hasher (via loginhsh -t)

Ext. options:
   -c  build without stuff (previous built packages)
   -s  sign (and move to dir ETERDESTSRPM if defined) after build
   -t  make temporary commit before build (rpmbb like behavior)
   -l  lazy cleanup (clean before build, not after)
   -f  force tag set (see rpmbs --help)


---------------------------
rpmbugs - open bugs in BROWSER
rpmbugs [-t] spec | bug number | package name | -qf command_name | /path/to/file

Options:
   -t  list in text console


---------------------------
rpmcs - cleanup spec (like cleanup_spec command)
Usage: rpmcs [specfile]
spec file can be autodetected from git repo
 specfile - spec file (copy will be saved as specfile~)


---------------------------
rpmgp - various package download operations
Usage: rpmgp [options] [-M60] [system] pkgname
 pkgname - installed package name or src.rpm
 system  - name of system (ALT Linux by default if -a missed)

Options:
   -a   search pkgname in all known repositories
   -c   check if this package exists in the ALT Linux repository
   -d   download all matched packages
   -g   clone last built package repo
   -gp  clone last built package repo via public access
   -gm  remote clone repo to USER/packages and clone it locally
   -m   migrate to gear from spec/srpm

Ext. options:
   -b   install packages needed for build (use sudo apt-get) (need spec not package name)
   -l   list packages needed for build (in local pkg system notation) (experimental)
   -r   refresh package list (download it again)
   -s   list all known remote repositories


---------------------------
Using autodetected spec etersoft-build-utils.spec...
rpmgs - get sources by spec / repository
Usage:  [GIRAR] [-a -r ] spec [new_version]
You can run 'rpmgs file.spec new_version' for set new version and download it

Options:
   -a  get all source (not only Source|Source0)
   -f  force download (remove source before download)


---------------------------
rpmlog - update changelog
Usage: rpmlog [-r|-s|-v] [-l|-t] [SPEC] [fromTAG] [toTAG]

Options:
   -v  increment version
   -r  increment release
   -s  increment subrelease
   -l  add changelog from git log (since last release tag or TAG)
   -t  test run (without change files and repo)


---------------------------
rpmpub - Etersoft specific script for publish gear repo to target ftp dir as src.rpm
Usage: rpmpub [-f] [-r PROJECTVERSION ] [SPEC] [TARGETDIR]

Options:
   -f                 force set tag
   -r PROJECTVERSION  set other project version (PROJECTVERSION/sources)
   TARGETDIR          copy signed src.rpm package to TARGETDIR (f.i., /tmp/some_version/sources)
                      By default used path from Source: spec field. 
                      Also you can set default target dir in ETERDESTSRPM variable.


---------------------------
rpmqf - the same as rpm -qf, but use which for search command place


---------------------------
rpmrb - update spec to vermajor.verminor version, build %rel release
Usage: rpmrb spec [vermajor][.verminor] [rel]
Example: rpmrb name.spec 22.6 alt2


---------------------------
rpmU - the same as [sudo] rpm -Uvh - update package
Usage: rpmU [package(s)]


---------------------------
rpmunmets - tests unmets in build packages
Usage:  [-M60] [-s]
Options:
 -s   - get all unmets
 -M60 - test for distro ALT Linux M60


---------------------------
Using autodetected spec etersoft-build-utils.spec...
rpmurl - open package Url in browser
Usage:  [-c -f -p -s] spec or package...
Options:
 -c - check URL
 -p - open package page at sisyphus.ru
 -s - open source dir in browser
Ext. options:
 -f - print failed URL only
