

---------------------------
ginit [GEAR] - initialize repo in git.eter for current project
Use: ginit without parameters
     ginit git.eter - for init in git.eter gear repo


---------------------------
gpull [args] - do git pull --rebase
Use: ginit without parameters


---------------------------
gpush - publish current project repo to git.eter
Use: gpush [-f|--force] [-a|--all] [project name] [target branch]


---------------------------
loginhsh - install package in hasher / take shell
Usage:  [-t -i -h -r] bin.rpm...
Options:
 -i - initialize hasher
 -c - cleanup hasher
 -t - use test hasher dir
 -r - remote login to hasher


---------------------------


---------------------------
myhsh - build package via hasher
Usage:  [-m -s -u -i -c] src.rpm...
Options:
 -i - install built packages in test hasher
 -c - build without stuff (previous built packages)


---------------------------
rpmbb - build  binary rpm from spec
Usage:  [-c -p -i -r] spec...
Options:
 -c - start from compile stage
 -i - install and package
 -p - packaging installed files into package
 -r - find build requires


---------------------------
rpmbph - backports spec and rebuild it
Usage:  [-r -u -U -n -i -m -v] [-M??] spec...
Use rpmbph -M40 for backport to ALT 4.0 and so on
Options:
 -r - remote build
 -u/-U - sign and upload after build
 -n - do not build in hasher
 -i - install built packages in test hasher
 -v - more verbose


---------------------------
rpmbs - make src.rpm from spec
Usage:  [-s -u -c -n --nodeps] spec...
Options:
 -s - sign package(s) and move it to upload dir
 -c - only sign package(s) with checking
 -u - sign package(s), upload it and run build
 -a TASK - sign package(s), update it and add to task TASK
 -n - do not check with sisyphus_check before upload
 -o - create nosrc.rpm package
 -z - create src.rpm with compatible gzip compression


---------------------------
rpmbsh - BSH - build source; use hasher
Usage:  [-r -s -u -m -i -c] spec...
Options:
 -r - remote build
 -t - make temporary commit before build (rpmbb like behavior)
 -u/-U - sign and upload after build
 -s - sign and and copy to upload after build
 -i - install built packages in test hasher
 -c - build without stuff (previous built packages)


---------------------------
rpmbugs [-t] spec | bug number | package name | -qf command | /path/to/file - open bugs in BROWSER


---------------------------
rpmcs spec - cleanup spec (like cleanup_spec command), adapted to ALT


---------------------------
rpmgp - various package download operations
Usage:  [options] [system] pkgname
Options:
rpmgp [-a -c -n] [system] pkgname - download src.rpm from 'system' repository to RPM/SRPMS and install it
 name - installed package name or src.rpm
 system - name of system (ALT Linux by default if -a missed too)
 -a  search pkgname in all known repositories
 -b  install packages needed for build (use sudo apt-get) (need spec not package name)
 -c  check if this package exists in the ALT Linux repository
 -d  download all matched packages
 -l  list packages needed for build (in local pkg system notation) (experimental)
 -n  do not install after download, just download in current dir
 -r  refresh package list (download it again)
 -s  list all known remote repositories


---------------------------
rpmgs - get sources for spec
Usage:  [-a -r ] spec ... | spec new_version
You can run rpmgs file.spec new_version for set new version and download it
Options:
 -a - get all source (not only 0)
 -f - force download (remove source before download)


---------------------------
rpmpub - Etersoft specific script for publish gear repo to target ftp dir
Usage: rpmpub [-r PROJECTVERSION ] [SPEC] [TARGETDIR]
You can set default target dir in UPLOADDIR variable in config file


---------------------------
rpmqf - the same as rpm -qf


---------------------------
rpmrb spec [vermajor][.verminor] [rel] - update spec to vermajor.verminor version, build %rel release


---------------------------
rpmU - the same as [sudo] rpm -Uvh - update package


---------------------------
rpmunmets - tests unmets in build packages
Usage:  [-M24 -M40]
Options:
 -s   - get all unmets
 -M40 - test for distro ALT Linux 4.0


---------------------------
rpmurl - open package Url in browser
Usage:  [-c -f -p -s] spec or package...
Options:
 -c - check URL
 -f - print failed URL only
 -p - open package page at sisyphus.ru
 -s - open source dir in browser
