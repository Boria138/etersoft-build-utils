#!/bin/sh
# 2004-2010 (c) Etersoft www.etersoft.ru
# Author: Vitaly Lipatov <lav@etersoft.ru>
# Public domain
#
# Скачивает исходный src.rpm-пакет с одного из репозиториев (по умолчанию ALT Linux) для пакета с указанным названием.
# Также можно сразу указать название пакета с исходниками
# Функции скрипта похожи на команду apt-get source пакет
# -c - checkonline

# load common functions, compatible with local and installed script
. `dirname $0`/../share/eterbuild/functions/common
load_mod rpm repl git rpm web

# path to ALT Linux's repositories
REPOSITORY="files/SRPMS obsolete orphaned"

# loads repos file and fill SYSNAME and SYSURL arrays
load_systems_list()
{
	local IDX=0
	local line
	while read line ; do
		# skip comments
		echo $line | grep "^#" >/dev/null && continue
		SYSNAME[$IDX]=${line/ *.*/}
		#FTP[$IDX]=${line/.* \+/}
		SYSURL[$IDX]=$(echo $line | sed -e "s|.* \+||g")
		IDX=$(($IDX+1))
	done < $ETERBUILDETC/repos
}

list_systems()
{
	echo "Known systems:"
	for ((i=0; i < ${#SYSNAME[*]}; i++)) ; do
			printf "[%-17s] %s\n" ${SYSNAME[$i]} ${SYSURL[$i]}
	done
	echo
	echo "You can add system to /etc/eterbuild/repos"
}

html_filter()
{
	grep "src.rpm" | sed -e "s|.*href=\"||g" | sed -e "s|\".*||g"
}

list_filter()
{
	sed -e "s|.src.rpm$||g"
}

# Using: git_list idx [force]
# set LIST variable to list file
get_list()
{
	[ -n "$VERBOSE" ] && echo "get_list for $1"
	local URL=${SYSURL[$1]}
	local FORCE=$2
	local SYS=${SYSNAME[$1]}
	local CURL=curl

	which $CURL 2>/dev/null >/dev/null || fatal "curl command needed for download"
	LIST=$OURTMPDIR/tmp-rpmgpall-$SYS
	if [ ! -f "$LIST" ] || [ "$FORCE" = "force" ] ; then
		echo "Get list for $SYS from $URL"
		#curl -l $URL/ >$LIST
		# suitable for ftp and http lists
		$CURL -l $URL/ | html_filter >$LIST
	else
		echo "List for $SYS"
	fi
}

get_system_idx()
{
	if [ -z "$1" ] ; then
		return 1
	fi
	for ((i=0; i < ${#SYSNAME[*]}; i++)) ; do
		if [ ${SYSNAME[$i]} = "$1" ] ; then
			echo $i
			return 0
		fi
	done
	return 1
}

check_name()
{
	if [ -z "$1" ] ; then
		echo "Error: missed package param"
		exit 1
	fi
	NLIST=`cat $LIST | grep -i $1`
#	if [ `cat $LIST | list_filter | grep -i $1 | wc -l` -gt 1 ] ; then
		#echo "Please type a full name of the package"
#		print_list $NLIST
#		return 1
#	fi

	if [ -z "$NLIST" ] ; then
		echo "$1: Not found"
		return 1
	fi

	return 0
}

check_system()
{
	local i
	local IDX=$1
	local URL=${SYSURL[$IDX]}
	#echo "Check for $SYSTEM"
	get_list $IDX
	#ls -l $LIST
	check_name $NAME
	if [ "$DOWNLOADALL" ] ; then
		for i in $NLIST ; do
			download_url $URL/$i
		done
	fi
}

update_cache_list()
{
	load_systems_list
	# if followed by system name
	IDX=`get_system_idx "$1"`
	if [ -n "$IDX" ] ; then
		get_list $IDX force
		shift
		exit 0
	fi
	# update all systems
	for ((i=0; i < ${#SYSNAME[*]}; i++)) ; do
		get_list $i force
	done
}

Usage="Usage: $name [options] [system] pkgname"
function mygetopts()
{
name=${0##*/}
Descr="$name - various package download operations"

phelp()
{
# TODO: improve description
	echog "$Descr"
	echog "$Usage"
	echog "Options:"
	echog "rpmgp [options] [system] pkgname - download src.rpm from 'system' repository"
	echog " name - installed package name or src.rpm"
	echog " system - name of system (ALT Linux by default if -a missed)"
	echog " -a  search pkgname in all known repositories"
	echog " -c  check if this package exists in the ALT Linux repository"
	echog " -d  download all matched packages"
	echog " -g  remote clone repo to USER/packages and clone it locally"
	echog " -m  migrate to gear from spec/srpm"
	echog "Ext. options:"
	echog " -b  install packages needed for build (use sudo apt-get) (need spec not package name)"
	echog " -l  list packages needed for build (in local pkg system notation) (experimental)"
	echog " -r  refresh package list (download it again)"
	echog " -s  list all known remote repositories"
	exit 0
}

while getopts :habcdglmrs opt; do
    case $opt in
    h) phelp; exit 0;;
    a) ALLSYSTEM=1 ;;
    b) INSTALLBINARY=1 ;;
    c) CHECKONLINE=1 ;;
    d) DOWNLOADALL=1 ;;
    g) CLONEGIT=1 ;;
    l) LISTREQS=1 ;;
    m) MIGRATEGEAR=1 ;;
    r) UPDATECACHE=1 ;;
    s) load_systems_list
       list_systems
       exit 0
       ;;
    +?) echog "$name: options should not be preceded by a '+'." 1>&2; exit 2;;
#    ?)  echog "$name: $OPTARG: bad option.  Use -h for help." 1>&2 ; exit 2;;
	?) OPTIND=$((OPTIND-1)); break;
    esac
done

# FIXME: параметры передаются и дальше (например, -i, -b)
# remove args that were options
if [ $# -gt 0 ]; then 
	shift $((OPTIND - 1))
fi

# pass other options to RPM:
LISTARGS=$@
}

mygetopts "$@"

# remove args that were options
if [ $# -gt 0 ]; then 
	shift $((OPTIND - 1))
fi

# optional arg
if [ -n "$UPDATECACHE" ] ; then
    update_cache_list $1
    exit 0
fi

test -z "$LISTARGS" && fatal "Please run with spec/package name"


# список названий систем, адресов (с зеркалами?), и режимов фильтрации
# название кэш-файла строить из названия системы
# выводить найденное сразу везде
#
# уточнение - [система] пакет

# install required for build binary packages
if [ -n "$INSTALLBINARY" ] ; then
	parse_cmd_pre "$@"
	pack_src_rpm $LISTRPMARGS
	LISTPKG=$(rpmquery --requires -p $LISTBUILT | clean_pkgreq | sed -e "s|rpm-build-altlinux-compat||g")
	DISTRVENDOR=$(distr_vendor -d)
	CMD=$(get_install_package_command $DISTRVENDOR interactive)
	echog "Running $SUDO $CMD $LISTPKG..."
	$SUDO $CMD $LISTPKG
fi

if [ -n "$MIGRATEGEAR" ] ; then
	parse_cmd_pre "$@"
	for INFILE in $LISTNAMES ; do
		# call for each file due generated BASENAME
		LISTNAMES=$INFILE pack_src_rpm $INFILE $LISTRPMARGS
		PKGNAME="$LISTBUILT"
		if [ -z "$BASENAME" ] ; then
			echo "Can't get basename for $PKGNAME, skipping"
			continue
		fi
		echo "Create gear repo $BASENAME from $PKGNAME in $GITREPODIR"
		GEARDIR=$GITREPODIR/$BASENAME
		test -d "$GEARDIR" && fatal "repo $GEARDIR already exits"
		mkdir -p "$GEARDIR" || fatal "can't create dir $GEARDIR"
		cd $GEARDIR || fatal "can't cd to $GEARDIR"
		git init-db || fatal "can't init db"
		gear-srpmimport $PKGNAME || fatal "can't import srpm $PKGNAME"
		# remove src.rpm only if it was generated from spec
		[ -z ${INFILE/*rpm/} ] || rm -vf $PKGNAME
	done
	exit 0
fi

# clone remote git
if [ -n "$CLONEGIT" ] ; then
	PKGNAME=$1
	INITLETTER=$(echo $PKGNAME | cut -c1)

	# http://git.altlinux.org/gears/N/NAME.git
	echo "Remote clone from /gears/$INITLETTER/$PKGNAME.git ..."
	if ! ssh $GIRARHOST clone /srpms/$INITLETTER/$PKGNAME.git packages/$PKGNAME.git ; then
		# http://git.altlinux.org/srpms/N/NAME.git
		echo "Remote clone from /srpms/$INITLETTER/$PKGNAME.git ..."
		ssh $GIRARHOST clone /srpms/$INITLETTER/$PKGNAME.git packages/$PKGNAME.git || warning "Can't remote clone."
	fi

	git clone git.alt:packages/$PKGNAME.git
	if cd $PKGNAME ; then
		CURRENTBRANCH=$(get_current_branch)
		for i in $(git branch -a | grep -v "/HEAD" | grep "remotes/origin/") ; do
			git checkout -b $(echo $i | sed -e "s|remotes.*/||g") $i
		done
		git checkout sisyphus || git checkout master || git checkout $CURRENTBRANCH
		cd - >/dev/null
	fi
	echo "See other repos at $GIRARHOST:"
	list_git_package $PKGNAME
	exit 0
fi

# lists packages for build
if [ -n "$LISTREQS" ] ; then
	print_target_buildreq $PKGNAME
	exit 0
fi

# Check online
if [ -n "$CHECKONLINE" ] ; then

	# possible it is spec
	if [ -f $1 ] ; then
		build_rpms_name "$1"
		SRCRPM=$NAMESRPMIN
		PKGNAME=$(get_pkgname_from_filename $SRCRPM)
	else
		if echo $1 | grep -q rpm ; then
			SRCRPM=$1
			PKGNAME=$(get_pkgname_from_filename $SRCRPM)
		else
			PKGNAME=$1
			SRCRPM=$(querypackage $PKGNAME "" "%{SOURCERPM}\n" | tail -n 1)
		fi
	fi

	if [ -n "$GIRAR_USER" ] ; then
		GITURL="http://git.altlinux.org/people/$GIRAR_USER/packages/$PKGNAME.git"
		if GET -d $GITURL ; then
			echog "Published at $GITURL by $GIRAR_USER"
		else
			echog "There is no git repo $GITURL"
		fi
	fi
	list_git_package $PKGNAME
	# TODO: BINARYREPO
	echo -n "ACL list for sisyphus: "
	ssh $GIRARHOST acl sisyphus $PKGNAME show
	
	RET="MISSED"
	if [ -n "$SRCRPM" ] ; then
		for i in $REPOSITORY ; do
			echog "Checking '$SRCRPM' in repository $i ..."
			rsync -n --progress $RSYNCSISYPHUS/$i/$SRCRPM  >/dev/null 2>&1 && { RET=$i; break; }
		done
		echog "Repository     Filename"
		printf "%-12s %30s\n" $RET $SRCRPM
	fi

	if [ "$RET" = "MISSED" ] ; then
		exit 1
	fi
	exit 0
fi

if [ -n "$2" ] && [ "$1" = "all" ] ; then
    shift
    ALLSYSTEM=1
fi

# Check concrete system
# two params: system, package
if [ -n "$2" ] ; then
	NAME=$2
	load_systems_list
	IDX=`get_system_idx "$1"`
	if [ -n "$IDX" ] ; then
		check_system $IDX
		print_list $NLIST
	else
		#fatal "Unknown system '$1', use rpmgp -s for get list"
		NAME=
	fi
	exit 0
else
	NAME=$1
fi

# Check all systems
if [ -n "$ALLSYSTEM" ] ; then
	load_systems_list
	# search throw all systems
	for ((i=0; i < ${#SYSNAME[*]}; i++)) ; do
		echo
		check_system $i
		print_list $NLIST
	done
	exit 0
fi

if [ -z "${1/*src.rpm/}" ]
then
	# it is src.rpm package
	SRCRPM=$1
else
	SRCRPM=$(querypackage $1 "" "%{SOURCERPM}\n")
fi
test -z "$SRCRPM" && fatal "Cannon find package for $1"
echog "Try to download $SRCRPM to $(pwd)"

for i in $REPOSITORY
do
	echo "--------Check in $i-----------"
	rsync -vay --partial --checksum --copy-links \
		--delete-after --progress $RSYNCSISYPHUS/$i/$SRCRPM ./$SRCRPM && break
done

