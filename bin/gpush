#!/bin/sh

# load common functions, compatible with local and installed script
. `dirname $0`/../share/eterbuild/functions/common
load_mod git

test -r "$1" && fatal "Do not need any files in params"

# If run with remote alias like girar name, use only it
if is_girar_name $1 ; then
	GIRARHOST=$1
	OVERRIDEGIRARHOST=$1
	shift
fi

if [ "$1" = "-h" ] ; then
	echo "gpush - publish current project repo remote git repo"
	echo "Use: gpush [GIRAR] [-f|--force] [-a|--all] [-t|--tags] [target branch]"
	exit 1
fi

PUSHFORCE=
if [ "$1" = "-f" ] || [ "$1" = "--force" ] ; then
	PUSHFORCE="--force"
	shift
fi

PUSHALL=
if [ "$1" = "-a" ] || [ "$1" = "--all" ] ; then
	PUSHALL="--all"
	shift
fi

TAGSALL=
if [ "$1" = "-t" ] || [ "$1" = "--tags" ] ; then
	TAGSALL="--tags"
	shift
fi

REMOTELIST="$(get_remote_git_list)"

# use one target if it one
if is_one_girar_name "$REMOTELIST" && [ -z "$OVERRIDEGIRARHOST" ] ; then
	GIRARHOST="$REMOTELIST"
	OVERRIDEGIRARHOST=$GIRARHOST
fi

# use as project name
#if [ -n "$1" ] ; then
#	PROJECTNAME=$1
#	shift
#else
	PROJECTNAME=$(get_gear_name)
#fi

CURRENTBRANCH=$(get_current_branch)

if [ -z "$CURRENTBRANCH" ] ; then
	echo "Can't detect current branch"
	exit 1
fi

if [ "$1" = "origin" ]; then
	REPO="$1"
	shift
	git push $PUSHALL $PUSHFORCE $REPO $@
	git push --tags $PUSHALL $PUSHFORCE $REPO $@
	exit
fi

if [ "$(git remote | uniq)" = "origin" ] ; then
	REPO="origin"
	git push $PUSHALL $PUSHFORCE $REPO $@
	git push --tags $PUSHALL $PUSHFORCE $REPO $@
	exit
fi

if [ -n "$1" ] ; then
	TARGETBRANCH="$1"
	shift
else
	TARGETBRANCH=$CURRENTBRANCH
fi

if [ "$PUSHALL" = "--all" ] ; then
	TEXTBRANCH="all branches"
	TARGETBRANCH=
else
	TEXTBRANCH="branch $TARGETBRANCH"
	if echo $TEXTBRANCH | egrep "alt|eter" ; then
		TEXTBRANCH="tag $TARGETBRANCH"
	fi
fi

push_to_remote()
{
	local GHOST=$1
	local TEXTTAG=
	[ -n "$TAGSALL$PUSHALL" ] && TEXTTAG="(with all tags)"
	echo
	echo "** Push $TEXTBRANCH from $PROJECTNAME.git to $GHOST:packages/$PROJECTNAME.git $TEXTTAG"
	# FIXME: push with one command
	if [ -n "$PUSHALL" ] ; then
		git push $PUSHALL $PUSHFORCE $GHOST:packages/$PROJECTNAME.git || return
		[ -z "$TAGSALL" ] || git push --tags $GHOST:packages/$PROJECTNAME.git
	else
		git push $PUSHALL $PUSHFORCE $GHOST:packages/$PROJECTNAME.git $TARGETBRANCH || return
		[ -z "$TAGSALL" ] || git push --tags $GHOST:packages/$PROJECTNAME.git $TARGETBRANCH
	fi
}


# if remote list is empty, do ginit
[ -n "$REMOTELIST" ] || ginit $GIRARHOST

LISTGIRARHOST="$GIRARHOST $(do_exclude_list "$GIRARHOST" "$REMOTELIST")"
[ -n "$OVERRIDEGIRARHOST" ] && LISTGIRARHOST=$OVERRIDEGIRARHOST
for i in $LISTGIRARHOST ; do
	push_to_remote $i
done
