#!/bin/bash
# 2005-2006, 2009, 2014 (c) Etersoft www.etersoft.ru
# Author: Vitaly Lipatov <lav@etersoft.ru>
# Public domain
#
# GS - get source
#
# Скачивает исходники, автоматически выправляя ситуацию с gz/bz2/tgz/zip (tar для git, tar.bz2 для src.rpm)
# Параметры:
# - название спек-файла
# -a - get all source
# check for the same file with other compression

# load common functions, compatible with local and installed script
. `dirname $0`/../share/eterbuild/functions/common
load_mod rpm tarball web buildsrpm

WEXT=""
GETSOURCE=""
LOADLIST="0"

#############################
Usage="Usage: $name [-a -f ] [spec] [new_version]"
function mygetopts()
{
name=${0##*/}
Descr="$name (Get Source) - get sources by spec / repository"

phelp()
{
	echog "$Descr"
	echog "$Usage"
	echog "You can run 'rpmgs 1.2' for set new version 1.2 and download it"
	echo
	echog "Options:"
	echog "   -a  get all source (not only Source|Source0)"
	echog "   -f  force download (remove source before download)"
}

while getopts :haf opt; do
    case $opt in
    h) phelp; exit 0;;
    a) LOADLIST=" 0 1 2 3 4 5 6 7 8" ;;
    f) FORCEDOWNLOAD=-f ;;
    +?) echog "$name: options should not be preceded by a '+'." 1>&2; exit 2;;
    ?)  echog "$name: $OPTARG: bad option.  Use -h for help." 1>&2 ; exit 2;;
    esac
done
 
# remove args that were options
shift $((OPTIND - 1))

LISTRPMARGS=$@

}

# FIXME: use erc, don't work with korinf-sisyphus!
# WEXT
# supports only .tar.bz2 or .tar files in SOURCE
get_archive()
{
	assert_var GETSOURCE
	# FIXME: drop any ext
	URL=${GETSOURCE/.bz2/}
	URL=${URL/.tar/}
	WEXT=`basename "$URL"`
	[ -n "$FORCEDOWNLOAD" ] && docmd rm -f "$WEXT.$1"
	#test -f "$WEXT.$1" && echog "$WEXT.$1 already exists" && return
	if ! download_url "$URL.$1" ; then
		rm -f "$WEXT.$1"
		return 1
	fi
	if [ "$WEXT.$1" = "$(basename "$GETSOURCE")" ] ; then
		# Skip repacking if the target has the same name
		return 0
	fi
	erc -f repack "$WEXT.$1" "$(basename "$GETSOURCE")"
}

# supports only bz2
get_archive1()
{
	URL=${GETSOURCE/.bz2/}
	WEXT=`basename "$URL"`
	[ -n "$FORCEDOWNLOAD" ] && docmd rm -f "$WEXT.$1"
	#test -f "$WEXT.$1" && echog "$WEXT.$1 already exists" && return
	download_url "$URL.$1" || return
	test -f "$WEXT.$1" || return
	echog -n "Converting to $WEXT.bz2..."
}

get_bz2()
{
	get_archive1 bz2 || return
	bunzip -t $WEXT.bz2 && return
	rm -fv $WEXT.bz2
	return 1
}

function get_gz()
{
	get_archive1 gz || return
	gunzip -f $WEXT.gz && return
	rm -fv $WEXT.gz
	return 1
}

function get_raw()
{
	download_url "$GETSOURCE"
	WEXT=`basename $GETSOURCE`
	test -f "$WEXT"
}


function dir_name()
{
	rm .listing
	#wget `dirname $MAINSOURCE` --dont-remove-listing
	
}

function get_source()
{
	GETSOURCE=$(eval_spec $1 | get_var "$2")
}

# download GETSOURCE url to tar.bz2 or tar (set WEXT as without extension name)
download_any_tarball()
{
	local ext
	for ext in tar.xz tar.bz2 tar.gz zip tgz 7z tbz2 tbz rar tar ; do
		get_archive $ext && return
		#FIXME:
		#test -f "$WEXT.$ext" && fatal "$EXT.$ext is exists after fail download!"
	done
	dir_name
	fatal "Cannot retrieve $GETSOURCE"
}

# param: spec name number (f.i., url for Source-url)
function source_ext()
{
	local GETSOURCEEXT=
	# %define SourceUrl ftp://updates.etersoft.ru/pub/Etersoft/WINE@Etersoft/last/sources/tarball/%name-%version.tar.gz
	#GETSOURCEURL=$(eval_spec $1 | grep -i "^%define ${2}Url${3} " | head -n 1 | sed -e "s/ *\$//g" | sed -e "s/^%define[ \t].*[ \t]//g")
	if grep -q "# Source$3-$2:" "$1" ; then
		local TMPSPEC=$1.tmpurl
		local NEWSOURCE=$(grep "# Source$3-$2:" "$1" | sed -e "s/.*$2:[ \t]*//g")
		test -n "$NEWSOURCE" || fatal "Can't extract URL from $Source$3-$2"
		# Fake replace for correct subst variables
		NEWSOURCE="$(echo "$NEWSOURCE" | sed -e 's|\&|\\&|g')"
		# TODO: use special field before %build
		cat $1 | sed -e "s|^Summary:.*|Summary: $NEWSOURCE|g" > $TMPSPEC
		GETSOURCEEXT=$(eval_spec "$TMPSPEC" | get_var "Summary")
		rm -f "$TMPSPEC"
	fi
	echo "$GETSOURCEEXT"
	test -n "$GETSOURCEEXT"
}


# Source-svn: http://svn.wikimedia.org/svnroot/mediawiki/trunk/extensions/Collection/
function get_source_svn()
{
	GETSOURCESVN=$(source_ext "$1" svn "$2")
	#if [ -n "$GETSOURCESVN" ] ; then
	#	warning "Source-svn is not supported yet"
	#	( cd $SPECDIR ; git svn clone $GETSOURCESVN .)
	#fi
	#test -n "$GETSOURCESVN"
}


# Source-git: http://git.altlinux.org/people/lav/packages/rpm-build-fonts.git
function get_source_git()
{
	fatal "realize me"
}

# Source-url: ftp://updates.etersoft.ru/pub/Etersoft/WINE@Etersoft/last/sources/tarball/%name-%version.tar.gz
# Get real Url from comment
function get_source_url()
{
	GETSOURCEURL=$(source_ext "$1" url "$2")
}

has_ext()
{
	! test -n "${1/*$2/}"
}

function print_error()
{
	echog "Can't find any spec file. It is possible you run this script not in git dir."
	echog "If you use old style build, run rpmgs with spec name as arg."
	echog "If you wish to download src.rpm, use rpmgp script."
	exit 1
}

# tarball dirname [options]
gear_update_from_tarball()
{
	local CREATEFLAG=
	local TARBALL="$1"
	local CURNAME="$2"
	shift 2
	[ -d "$CURNAME" ] || CREATEFLAG=-c
	# TODO: check tarball ext. for unsupported arch and realize it here or in gear-update
	echo "Commit tarball '$TARBALL' to git subdir '$CURNAME'..."
	if ! docmd gear-update $CREATEFLAG $@ "$TARBALL" "$CURNAME" ; then
		if gear-update $CREATEFLAG $@ "$TARBALL" "$CURNAME" 2>&1 | grep -q "More than one subdirectory specified" ; then
			echo "Try unpack as is"
			CREATEFLAG="$CREATEFLAG -a"
			docmd gear-update $CREATEFLAG $@ "$TARBALL" "$CURNAME" && return
		fi
	else
		return 0
	fi
	fatal "can't import tarball '$TARBALL'"
}


parse_cmd_pre_spec "$@"
mygetopts $LISTARGS

test -z "$VERBOSE" || echo "'$LISTNAMES' @ '$LISTRPMARGS'"

if [ -n "$LISTRPMARGS" ] ; then
	if [ -z "${LISTRPMARGS/*spec/}" ] ; then
		fatal "run with incorrect filename $LISTRPMARGS"
	fi
	if [ ! -f "$LISTNAMES" ] ; then
		fatal "set version permitted only for one file"
	fi
	if [ "${LISTRPMARGS/ /}" != "$LISTRPMARGS" ] ; then
		fatal "you run rpmgs with more than one version"
	fi
	GSSETVERSION=$LISTRPMARGS
fi

test -z "$LISTNAMES" && print_error

[ -z "$GSSETRELEASE" ] || GSSKIPADDCHANGELOG=1

for spec in $LISTNAMES
do
	if [ -n "${spec/*spec/}" ] ; then
		print_error
	fi

	set_specdir $spec

	# Set version if needed
	if [ -n "$GSSETVERSION" ] ; then
		CURVER=$(get_version $spec)
		set_version $spec $GSSETVERSION
		if [ "$CURVER" != "$GSSETVERSION" ] ; then
			set_release $spec $GSSETRELEASE
			echo "Set new $GSSETVERSION-$GSSETRELEASE version for $spec"
		else
			echo "Version $GSSETVERSION already set"
			GSSKIPADDCHANGELOG=1
		fi
	fi

	for nn in "" $LOADLIST
	do
		get_source $spec "Source$nn"
		[ "$GETSOURCE$nn" = "0" ] && continue
		test -z "$GETSOURCE" && { echog "Skip Source${nn} from $spec" ; continue ; }
		FTB=`basename "$GETSOURCE"`
		# for get RPMSOURCEDIR
		build_rpms_name $spec

		# TODO: do not use RPMSOURCEDIR for temp. tarballs
		[ -n "$FORCEDOWNLOAD" ] && rm -f "$RPMSOURCEDIR/$FTB"
		#[ -f "$RPMSOURCEDIR/$FTB" ] && { echog "Tarball $FTB already exists in $RPMSOURCEDIR dir, skipping." ; continue ; }

		# TODO: dropout these pushd/popd
		# use pushd/popd due several cd / cd -
		mkdir -p $RPMSOURCEDIR/ && pushd $RPMSOURCEDIR/ || fatal "Can't create/chdir..."

		# Test for eterbuild extensions
		get_source_url $spec $nn || get_source_svn $spec $nn

		if [ -n "${GETSOURCESVN}" ] ; then
			is_gear $SPECDIR || fatal "Source-svn works only with gear repo"
		elif is_gear $SPECDIR; then
			echog "Try to load ${GETSOURCEURL:-$GETSOURCE} for $spec"
			if ! has_ext "$GETSOURCE" .tar ; then
				warning "It is recommended to use .tar tarballs for sources in gear"
			fi
			# TODO: rewrite code to use original file format and temp. download dir
			if [ -n "${GETSOURCEURL}" ] ; then
				# UpUrl for gear
				download_url "$GETSOURCEURL"
				# FIXME: gear-update can use any tarball
				erc -f repack $(basename "$GETSOURCEURL") $FTB
			elif has_ext "$GETSOURCE" .tar ; then
				# tar target: try to load and convert
				download_any_tarball
				test -s $WEXT.tar.bz2 && FTB=$WEXT.tar.bz2
			elif has_ext "$GETSOURCE" .tar.bz2 ; then
				# tar.bz2 target: for src.rpm policy compatibility
				download_any_tarball
				test -f $WEXT.tar.bz2 || erc -f $WEXT.tar tar.bz2: || fatal "Cannot bzip $WEXT.tar"
			else
				download_url "$GETSOURCE"
			fi
		else
			[ -z "${GETSOURCEURL}" ] || fatal "Source git works only with gear repo"
			echog "Try to load ${GETSOURCEURL:-$GETSOURCE} for $spec"
			if ! has_ext "$GETSOURCE" .bz2 ; then
				warning "It is recommended to use .bz2 tarballs for sources in rpm"
			fi
			if [ -n "${GETSOURCEURL}" ] ; then
				# UpUrl for rpm
				download_url "$GETSOURCEURL"
				erc -f repack $(basename "$GETSOURCEURL") $FTB
			elif ! has_ext "$GETSOURCE" .tar.bz2 ; then
				# if not tar.bz2 target, direct download
				download_url "$GETSOURCE"
			elif has_ext "$GETSOURCE" .tar.bz2 ; then
				# if tar.bz2 target
				download_any_tarball
				#echog -n "Compressing to $WEXT.tar.bz2..."
				test -f $WEXT.tar.bz2 || erc -f $WEXT.tar tar.bz2: || fatal "Cannot bzip $WEXT.tar"
			elif has_ext "$GETSOURCE" .bz2 ; then
				warning "It is not tarball (possible single file)..."
				get_bz2 || get_gz || get_raw || fatal "Cannot retrieve $GETSOURCE"
			else
				fatal "Logical error with $GETSOURCE"
			fi
		fi

		echo "DONE"
		popd

	done

	if [ -z "$GSSKIPADDCHANGELOG" ] ; then
		# Write changelog if all done
		CURVER=$(get_version $spec)
		CURREL=$(get_release $spec)
		EGEARME=""
		is_gear && EGEARME=" with rpmgs script"
		add_changelog_helper "- new version ($CURVER)$EGEARME" $spec || echog "Changelog entry for $CURVER-$CURREL already exists"
	fi

	if [ -n "$GSSETVERSION" ] || [ -n "$FORCEDOWNLOAD" ]; then
		if [ -n "${GETSOURCESVN}" ] ; then
			# clone svn repo to current dir
			# FIXME: need to clone in git root dir
			GITROOT=.
			[ $(basename `pwd`) = ".gear" ] && GITROOT=../
			docmd git svn clone $GETSOURCESVN $GITROOT
			echo "Run svn rebase from $GETSOURCESVN"
			docmd git svn rebase
		elif is_gear ; then
			CURNAME=$(get_tardir_from_rules) || fatal "There is no tar: line in gear rules file"
			test -d "$CURNAME" || CURNAME=$(get_tarballname "$spec")
			test -d "$CURNAME" || CURNAME=$BASENAME
			gear_update_from_tarball "$RPMSOURCEDIR/$FTB" "$CURNAME" $FORCEDOWNLOAD
			rm -f "$RPMSOURCEDIR/$FTB"
			docmd git commit -m "just import $FTB with rpmgs script"
		fi
	else
		is_gear && echo "Skip tarball committing (run with version or with -f option)."
	fi
done

exit 0

